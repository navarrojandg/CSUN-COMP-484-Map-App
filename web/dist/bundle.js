/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Dynamically Load Google Maps API manually\n// https://developers.google.com/maps/documentation/javascript/overview#Loading_the_Maps_API\n\n// Create script tag\nconst googleMapsApiScript = document.createElement(\"script\");\ngoogleMapsApiScript.src = `https://maps.googleapis.com/maps/api/js?key=${\"AIzaSyA04qhdCFrHApPsCsMjwZp0GKC4wRGtJzk\"}&callback=initMap&libraries=drawing`;\ngoogleMapsApiScript.async = true;\n\n// Attach callback function to the 'window' object\nwindow.initMap = function () {\n  // JS API is loaded and available\n  console.log(\"Google maps loaded successfully\");\n\n  // main\n  main();\n};\n\ndocument.head.appendChild(googleMapsApiScript);\n\n// Our main entry point\n// This is where we will load everything\nfunction main() {\n  // Markers are where the user clicks\n  window.markers = [];\n  // Drawings are where the rectangles are drawn\n  window.drawings = [];\n\n  // Initialize Locations\n  window.assignedLocations = createAssignedLocations();\n  window.randomLocations = createRandomLocations();\n\n  // Initialize and style the map\n  window.map = new google.maps.Map(document.getElementById(\"map\"), {\n    center: new google.maps.LatLng(34.2400695486868, -118.52931715944784),\n    zoom: 11,\n    restriction: {\n      latLngBounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.235407371515194, -118.53399198855638),\n        new google.maps.LatLng(34.24488087222004, -118.5232104128073)\n      ),\n      strictBounds: true,\n    },\n    mapTypeControl: false,\n    streetViewControl: false,\n    rotateControl: false,\n    disableDoubleClickZoom: true,\n  });\n\n  const styles = [\n    {\n      featureType: \"administrative\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }],\n    },\n    {\n      featureType: \"landscape\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }],\n    },\n    {\n      featureType: \"poi\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }],\n    },\n    {\n      featureType: \"road\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }],\n    },\n    {\n      featureType: \"transit\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }],\n    },\n    {\n      featureType: \"water\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }],\n    },\n  ];\n\n  map.setOptions({ styles });\n\n  $(\"#startQuiz\").click(startQuiz);\n  $(\"#resetQuiz\").click(resetQuiz);\n}\n\nfunction addMarker({ latLng }) {\n  const marker = new google.maps.Marker({\n    position: latLng,\n    map,\n    icon: getMarkerIcon(markers.length),\n  });\n  marker.setMap(map);\n  markers.push(marker);\n}\n\nfunction getMarkerIcon(index) {\n  return `http://maps.google.com/mapfiles/kml/pal3/icon${index}.png`;\n}\n\nfunction showAllMarkers() {\n  markers.forEach((marker) => {\n    marker.setMap(map);\n  });\n}\n\nfunction hideAllMarkers() {\n  markers.forEach((marker) => {\n    marker.setMap(null);\n  });\n}\n\nfunction removeAllMarkers() {\n  hideAllMarkers();\n  markers = [];\n}\n\nfunction drawCorrectRectangle(bounds) {\n  const rect = new google.maps.Rectangle({\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    map,\n    bounds,\n  });\n\n  rect.setMap(map);\n  drawings.push(rect);\n}\n\nfunction drawIncorrectRectangle(bounds) {\n  const rect = new google.maps.Rectangle({\n    strokeColor: \"#FF0000\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF0000\",\n    fillOpacity: 0.35,\n    map,\n    bounds,\n  });\n\n  rect.setMap(map);\n  drawings.push(rect);\n}\n\nfunction showAllDrawings() {\n  drawings.forEach((drawing) => {\n    drawing.setMap(map);\n  });\n}\n\nfunction hideAllDrawings() {\n  drawings.forEach((drawing) => {\n    drawing.setMap(null);\n  });\n}\n\nfunction removeAllDrawings() {\n  hideAllDrawings();\n  drawings = [];\n}\n\nfunction createAssignedLocations() {\n  return [\n    {\n      name: \"Alumni Relations, Reseda Annex\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.2391376978759, -118.53383135379052),\n        new google.maps.LatLng(34.240732914951, -118.53352684880817)\n      ),\n    },\n  ];\n}\n\nfunction createRandomLocations() {\n  return [\n    {\n      name: \"Addie Klotz Student Health Center\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.237864767676506, -118.52669935063756),\n        new google.maps.LatLng(34.23850899732018, -118.52580297466965)\n      ),\n    },\n    {\n      name: \"Arbor Grill\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.240943816542284, -118.53011527303849),\n        new google.maps.LatLng(34.24134060214873, -118.52953867938407)\n      ),\n    },\n    {\n      name: \"Bayramian Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.239908581113546, -118.5314578777683),\n        new google.maps.LatLng(34.24071390729774, -118.53011841485248)\n      ),\n    },\n    {\n      name: \"Bookstein Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.24150335021813, -118.53107865153213),\n        new google.maps.LatLng(34.24244508420423, -118.53027351924935)\n      ),\n    },\n    {\n      name: \"Chaparral Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23789448920161, -118.52727925978489),\n        new google.maps.LatLng(34.23860392157965, -118.5266999162683)\n      ),\n    },\n    {\n      name: \"Citrus Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23881951845458, -118.52891344613),\n        new google.maps.LatLng(34.239156237227995, -118.52744674148214)\n      ),\n    },\n    {\n      name: \"CSUN Bookstore\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23696965263106, -118.52883298526854),\n        new google.maps.LatLng(34.23780556276163, -118.52758447375719)\n      ),\n    },\n    {\n      name: \"CSUN Botanic Garden\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23857137585203, -118.52729428473279),\n        new google.maps.LatLng(34.23916874065112, -118.5264590339832)\n      ),\n    },\n    {\n      name: \"CSUN Duck Pond\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23647143135077, -118.52643344700974),\n        new google.maps.LatLng(34.23719351027536, -118.52575635535523)\n      ),\n    },\n    {\n      name: \"CSUN Orange Grove\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23556521306399, -118.52727873961642),\n        new google.maps.LatLng(34.236355302815056, -118.52473802309613)\n      ),\n    },\n    {\n      name: \"CSUN Rainforest\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.238722727347, -118.5260065852216),\n        new google.maps.LatLng(34.23915132470618, -118.52523552085218)\n      ),\n    },\n    {\n      name: \"Cypress Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23600069557208, -118.53010985494414),\n        new google.maps.LatLng(34.23672166874877, -118.52921265571266)\n      ),\n    },\n    {\n      name: \"Delmar T. Oviatt Library\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.239168084905515, -118.53011255192945),\n        new google.maps.LatLng(34.24093999374319, -118.52857327999084)\n      ),\n    },\n    {\n      name: \"Eucalyptus Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.238472829014995, -118.5289203197883),\n        new google.maps.LatLng(34.23880350548117, -118.52744791002961)\n      ),\n    },\n    {\n      name: \"Jacaranda Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.240951322188664, -118.52952995779204),\n        new google.maps.LatLng(34.242196831794224, -118.52777400170163)\n      ),\n    },\n    {\n      name: \"Jerome Richfield Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23858687983867, -118.53095003542506),\n        new google.maps.LatLng(34.23907448642647, -118.530300572015)\n      ),\n    },\n    {\n      name: \"Live Oak Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23814369975453, -118.52891782860493),\n        new google.maps.LatLng(34.23845213402119, -118.52745328601587)\n      ),\n    },\n    {\n      name: \"Magnolia Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23918734631592, -118.52858296465841),\n        new google.maps.LatLng(34.23966153298631, -118.52815912289006)\n      ),\n    },\n    {\n      name: \"Manzanita Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.236864570264544, -118.53057866608773),\n        new google.maps.LatLng(34.23783384968837, -118.52947758896543)\n      ),\n    },\n    {\n      name: \"Monterey Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23644825372017, -118.52465055623979),\n        new google.maps.LatLng(34.23690202285693, -118.5232963501109)\n      ),\n    },\n    {\n      name: \"Nordhoff Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.235976950331406, -118.53096040179103),\n        new google.maps.LatLng(34.236703864130284, -118.53009909578377)\n      ),\n    },\n    {\n      name: \"Redwood Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.24128055035257, -118.52728294837203),\n        new google.maps.LatLng(34.242526397337684, -118.52535115278131)\n      ),\n    },\n    {\n      name: \"Santa Susana Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.237361490248155, -118.52944230269551),\n        new google.maps.LatLng(34.2378706837444, -118.52914296090844)\n      ),\n    },\n    {\n      name: \"Sequoia Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.24011758145008, -118.52846248308555),\n        new google.maps.LatLng(34.24078669943268, -118.52760249459998)\n      ),\n    },\n    {\n      name: \"Sierra Center\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.238771562498634, -118.53142950042601),\n        new google.maps.LatLng(34.239066318110474, -118.53094197817052)\n      ),\n    },\n    {\n      name: \"Sierra Hall\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23809237436892, -118.53139898973009),\n        new google.maps.LatLng(34.238469630424426, -118.53002564542999)\n      ),\n    },\n    {\n      name: \"Student Recreation Center\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23925075841574, -118.52522425796396),\n        new google.maps.LatLng(34.24062144235223, -118.52470945965145)\n      ),\n    },\n    {\n      name: \"The Soraya\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23573537976935, -118.52916606144427),\n        new google.maps.LatLng(34.23673868939436, -118.52746364118407)\n      ),\n    },\n    {\n      name: \"University Student Union\",\n      bounds: new google.maps.LatLngBounds(\n        new google.maps.LatLng(34.23977382999084, -118.52728907808333),\n        new google.maps.LatLng(34.24044595433443, -118.52530517596364)\n      ),\n    },\n  ];\n}\n\nfunction createQuestions(count) {\n  let questions = [];\n  questions = [...assignedLocations];\n\n  // loop 4 times\n  for (let i = 0; i < count - 1; i++) {\n    let randomIndex = Math.floor(Math.random() * window.randomLocations.length);\n    let [randomLocation] = window.randomLocations.splice(randomIndex, 1);\n    questions.push(randomLocation);\n  }\n  return questions;\n}\n\nfunction startQuiz() {\n  if (window.isQuizStarted) {\n    alert(\"Quiz has already started!\");\n    return;\n  }\n  window.isQuizStarted = true;\n  let start = confirm(\"Start the quiz?\");\n  if (!start) return;\n\n  // Create the questions\n  window.questions = createQuestions(5);\n\n  window.totalQuestions = questions.length;\n  window.totalCorrect = 0;\n\n  $(\"#quiz\").on(\"question\", (e, question) => {\n    if (!question) {\n      $(e.currentTarget).append(\n        `<div class=\"score\">Score: ${totalCorrect}/${totalQuestions}</div>`\n      );\n      return;\n    }\n    window.listener = addDoubleClickListener(({ latLng }) => {\n      addMarker({ latLng });\n      const correct = question.bounds.contains(latLng);\n      $(e.currentTarget).append(\n        `<div class=\"result ${correct ? \"correct\" : \"incorrect\"}\">${\n          correct ? \"Correct\" : \"Incorrect\"\n        }!</div>`\n      );\n\n      if (correct) {\n        drawCorrectRectangle(question.bounds);\n        totalCorrect++;\n      } else {\n        drawIncorrectRectangle(question.bounds);\n      }\n\n      removeDoubleClickListener();\n      triggerQuestion();\n    });\n\n    $(e.currentTarget).append(\n      `<div class=\"question\">Double click on ${question.name}.</div>`\n    );\n  });\n\n  triggerQuestion();\n}\n\nfunction triggerQuestion() {\n  $(\"#quiz\").trigger(\"question\", questions.shift());\n}\n\nfunction resetQuiz() {\n  let reset = confirm(\"Reset the quiz?\");\n  if (!reset) return;\n  questions = [];\n  $(\"#quiz\").empty();\n  // Remove event listeners\n  $(\"#quiz\").off();\n  removeDoubleClickListener();\n  removeAllMarkers();\n  removeAllDrawings();\n  isQuizStarted = false;\n}\n\nfunction addDoubleClickListener(callback) {\n  return map.addListener(\"dblclick\", callback);\n}\n\nfunction removeDoubleClickListener() {\n  google.maps.event.removeListener(listener);\n}\n\n// window.removeAllDrawings = removeAllDrawings;\n\n// window.showAllPossibleLocations = function () {\n//   [...assignedLocations, ...randomLocations]\n//     .map((location) => location.bounds)\n//     .forEach(drawCorrectRectangle);\n// };\n\n\n//# sourceURL=webpack://web/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;